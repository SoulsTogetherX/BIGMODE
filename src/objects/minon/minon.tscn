[gd_scene load_steps=25 format=3 uid="uid://ug3aissj7fqx"]

[ext_resource type="Script" path="res://src/objects/minon/minon.gd" id="1_x86le"]
[ext_resource type="PackedScene" uid="uid://cy6wdj1eolk4p" path="res://src/custom_nodes/emiter/emitter.tscn" id="2_ca1gw"]
[ext_resource type="Texture2D" uid="uid://8op1vsrf2hra" path="res://asset/sprites/minon/minon_spritesheet.png" id="2_d3kg8"]
[ext_resource type="AudioStream" uid="uid://klshyflkrdif" path="res://asset/sounds/footsteps/player/Player_step_1.wav" id="3_0u5vd"]
[ext_resource type="AudioStream" uid="uid://bivx41oe5a74o" path="res://asset/sounds/footsteps/player/Player_step_2.wav" id="4_3i3ub"]
[ext_resource type="Script" path="res://src/custom_nodes/StateMachine/state_machine.gd" id="4_x64ip"]
[ext_resource type="Script" path="res://src/objects/minon/state/fall.gd" id="5_13mwt"]
[ext_resource type="AudioStream" uid="uid://dt34w6btqdnqa" path="res://asset/sounds/footsteps/player/Player_step_3.wav" id="5_g64f2"]
[ext_resource type="PackedScene" uid="uid://21ninjibavp5" path="res://asset/particles/walk_particle.tscn" id="6_4ho5w"]
[ext_resource type="Script" path="res://src/objects/minon/state/idle.gd" id="6_cwrv1"]
[ext_resource type="Script" path="res://src/objects/minon/state/move.gd" id="7_8qpba"]
[ext_resource type="Script" path="res://src/objects/minon/state/ded.gd" id="8_43vlt"]

[sub_resource type="SystemFont" id="SystemFont_jxklu"]
subpixel_positioning = 0

[sub_resource type="LabelSettings" id="LabelSettings_qcebg"]
font = SubResource("SystemFont_jxklu")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_j2qha"]
size = Vector2(52.5, 48.75)

[sub_resource type="Animation" id="Animation_323fg"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [6]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("body:frame_coords")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [Vector2i(0, 0)]
}

[sub_resource type="Animation" id="Animation_xvard"]
resource_name = "ded"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [8, 9, 10, 11]
}
tracks/1/type = "method"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.5),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"queue_free"
}]
}

[sub_resource type="Animation" id="Animation_6m82t"]
resource_name = "fall"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0]
}

[sub_resource type="Animation" id="Animation_nvd7n"]
resource_name = "idle"
length = 1.5
loop_mode = 1
step = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:frame_coords")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [Vector2i(0, 0), Vector2i(1, 0), Vector2i(2, 0)]
}

[sub_resource type="Animation" id="Animation_mem16"]
resource_name = "walk"
length = 0.5
loop_mode = 1
step = 0.125
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.125, 0.25, 0.375),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [4, 5, 6, 7]
}
tracks/1/type = "method"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Emitter")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.25),
"transitions": PackedFloat32Array(1, 1),
"values": [{
"args": [],
"method": &"play_random"
}, {
"args": [],
"method": &"play_random"
}]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_juugu"]
_data = {
"RESET": SubResource("Animation_323fg"),
"ded": SubResource("Animation_xvard"),
"fall": SubResource("Animation_6m82t"),
"idle": SubResource("Animation_nvd7n"),
"walk": SubResource("Animation_mem16")
}

[sub_resource type="RectangleShape2D" id="RectangleShape2D_lgdwk"]
size = Vector2(45, 0.674985)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_guohv"]
size = Vector2(50.0001, 30)

[sub_resource type="GDScript" id="GDScript_lju1m"]
script/source = "@tool
class_name StateOverhead extends Node

## Checks if this [StateOverhead] object affects a given object.[br][br]
##
## [b]Note[/b]: Changing this value during runtime does nothing.
@export var _usesActor : bool = false:
	set(val):
		if !Engine.is_editor_hint():
			return;
		_usesActor = val;
		notify_property_list_changed();
## Checks if this [StateOverhead] object will use an animationPlayer.[br][br]
##
## [b]Note[/b]: Changing this value during runtime does nothing.
var _usesAnimationPlayer : bool:
	set(val):
		if !Engine.is_editor_hint():
			return;
		_usesAnimationPlayer = val;
		notify_property_list_changed();
## The actor that will give assigned to every [State]. Typically a [CharacterBody2D] or [CharacterBody3D].[br][br]
##
## Shown in the editor window when [member _usesActor] is [code]true[/code].
var _actor;
var _animationPlayer;
var _drawMod;
var _state_machines : Dictionary;

signal state_changed(machine_id : String);

func _get_property_list():
	var properties = [];
	if _usesActor:
		properties.append({
			name  = \"_actor\",
			type  = TYPE_OBJECT,
			hint  = PROPERTY_HINT_NODE_TYPE,
			usage = PROPERTY_USAGE_DEFAULT,
		});
	properties.append({
		name  = \"_usesAnimationPlayer\",
		type  = TYPE_BOOL,
		usage = PROPERTY_USAGE_DEFAULT,
	});
	if _usesAnimationPlayer:
		properties.append({
			name  = \"_animationPlayer\",
			type  = TYPE_OBJECT,
			hint  = PROPERTY_HINT_NODE_TYPE,
			hint_string = \"AnimationPlayer\",
			usage = PROPERTY_USAGE_DEFAULT,
		});
	return properties;

func _property_can_revert(property: StringName) -> bool:
	match property:
		\"_usesAnimationPlayer\":
			return true;
	return false;

func _property_get_revert(property : StringName) -> Variant:
	match property:
		\"_usesAnimationPlayer\":
			return false;
	return null;

func _ready() -> void:
	if Engine.is_editor_hint():
		set_process_unhandled_input(false);
		set_physics_process(false);
		set_process(false);
		return;
	
	if _usesActor && not _actor.is_inside_tree():
		_actor.ready;
	if _usesAnimationPlayer && not _animationPlayer.is_inside_tree():
		_animationPlayer.ready;
	
	for machine in get_children():
		if machine is StateMachine:
			if machine.get_id() == \"\":
				machine._name_id = \"blank\";
			
			if _state_machines.has(machine.get_id()):
				machine._name_id = _make_id_unique(machine.get_id());
				_state_machines[_make_id_unique(machine.get_id())] = machine;
			else:
				_state_machines[machine.get_id()] = machine;
			
			machine.init(_actor, _animationPlayer, self);

func _make_id_unique(id : String) -> String:
	id += \"_\";
	var idx = 0;
	while(_state_machines.has(id + str(idx))):
		idx += 1;
	return id + str(idx);

func _unhandled_input(event: InputEvent) -> void:
	for machine in _state_machines.values():
		if machine:
			machine.process_input(event);

func _physics_process(delta: float) -> void:
	for machine in _state_machines.values():
		if machine:
			machine.process_physics(delta);

func _process(delta: float) -> void:
	for machine in _state_machines.values():
		if machine:
			machine.process_frame(delta);

func update() -> void:
	for machine in _state_machines.values():
		if machine:
			machine.update();

func update_machine(machine_id: String) -> void:
	if _state_machines.has(machine_id):
		_state_machines[machine_id].update();

## Returns the defined acting object of this [StateOverhead] object.
func get_actor() -> Node:
	return _actor;

## Changes the running [StateBase] to an accessible one, within the [StateMachine] corresponding to
## the given index, with the given name identifier.[br][br]
##
## [b]NOTE[/b]: This function will [i]stop the program[/i] if the given name identifier cannot be
## found in the accessible children.
func change_state(machine_id: String, state_name: String) -> void:
	if _state_machines.has(machine_id):
		_state_machines[machine_id].change_state(state_name);

## Returns the ids of all attached [StateMachine] objects.
func get_machine_ids() -> Array[String]:
	return _state_machines.keys();

## Returns a Dictionary, with the ids of all attached [StateMachine] objects as the keys,
## and an [Array] of the ids of each corresponding [StateMachine]'s [StateBase] objects.
func get_state_ids() -> Dictionary:
	var ret = Dictionary();
	for machine_id in _state_machines.keys():
		ret[machine_id] = _state_machines[machine_id].get_state_ids();
	return ret;

## Checks to see if this [StateOverhead] has an attached [StateMachine] with the given id.
func has_machine(machine_id : String) -> bool:
	return _state_machines.has(machine_id);

## Checks to see if this [StateOverhead] has a [StateBase], with the given id, attached to
## one of the attached [StateMachine] objects.
func has_state(state_id : String) -> bool:
	for machine in _state_machines.values():
		if state_id in machine.get_state_ids():
			return true;
	return false;

## Returns the id of the first [StateMachine] with a [StateBase] with the given id.[br]
## Is there are no such [StateMachine] objects, this method will return an empty
## [String].
func find_state(state_id : String) -> String:
	for machine_id in _state_machines.keys():
		if state_id in _state_machines[machine_id].get_state_ids():
			return machine_id;
	return \"\";

## Checks to see if this [StateOverhead] has a [StateBase], with the given id, attached to
## a [StateMachine] object, with the given id.
func has_machine_state(machine_id : String, state_id : String) -> bool:
	return true;

## Checks if the running [StateBase]'s name identifier is equal to a passed [String] object.
func is_in_state(machine_id : String, state_id : String) -> bool:
	if _state_machines.has(machine_id):
		return _state_machines[machine_id].is_in_state(state_id);
	return false;

## Checks if the running [StateBase]'s name identifier is withing a passed [Array] of [String] objects.
func is_in_states(machine_id : String, state_ids : Array[String]) -> bool:
	if _state_machines.has(machine_id):
		return _state_machines[machine_id].is_in_states(state_ids);
	return false;
"

[node name="Minon" type="CharacterBody2D"]
scale = Vector2(0.8, 0.8)
collision_layer = 4
collision_mask = 17
script = ExtResource("1_x86le")
settings = SubResource("LabelSettings_qcebg")

[node name="Emitter" parent="." node_paths=PackedStringArray("_particles") instance=ExtResource("2_ca1gw")]
volume_db = -20.0
pitch_scale = 1.4
max_distance = 500.0
attenuation = 0.594604
_particles = NodePath("../body/WalkParticle")
audios = Array[AudioStream]([ExtResource("3_0u5vd"), ExtResource("4_3i3ub"), ExtResource("5_g64f2")])

[node name="body" type="Sprite2D" parent="."]
position = Vector2(0, 0.100125)
scale = Vector2(-1, 0.997146)
texture = ExtResource("2_d3kg8")
hframes = 4
vframes = 3
frame = 6

[node name="WalkParticle" parent="body" instance=ExtResource("6_4ho5w")]
position = Vector2(16.2176, 21.2104)

[node name="fall_detect" type="RayCast2D" parent="body"]
modulate = Color(0, 1, 0, 1)
position = Vector2(-25, 29.9855)
scale = Vector2(1, 1.00286)
exclude_parent = false
target_position = Vector2(0, 1.25)
collision_mask = 17

[node name="forward_detect" type="RayCast2D" parent="body"]
modulate = Color(0, 1, 0, 1)
position = Vector2(-26.25, 27.4783)
scale = Vector2(1, 1.00286)
exclude_parent = false
target_position = Vector2(-1.25, 3.8147e-06)
collision_mask = 5

[node name="bodyCollide" type="CollisionShape2D" parent="."]
position = Vector2(0, 5.62499)
shape = SubResource("RectangleShape2D_j2qha")

[node name="body_animate" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_juugu")
}
autoplay = "idle"

[node name="weak_point" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="weak_point"]
self_modulate = Color(0, 1, 0, 1)
position = Vector2(-2.23517e-07, -19.0875)
scale = Vector2(0.999999, 0.999999)
shape = SubResource("RectangleShape2D_lgdwk")

[node name="kill_area" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="kill_area"]
self_modulate = Color(0, 0, 1, 1)
position = Vector2(-4.47034e-07, 15)
scale = Vector2(0.999998, 0.999998)
shape = SubResource("RectangleShape2D_guohv")

[node name="StateOverhead" type="Node" parent="."]
script = SubResource("GDScript_lju1m")
_usesActor = true
_usesAnimationPlayer = true
_actor = Object(CharacterBody2D,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(1, 1, 1, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"position":Vector2(0, 0),"rotation":0.0,"scale":Vector2(0.8, 0.8),"skew":0.0,"disable_mode":0,"collision_layer":4,"collision_mask":17,"collision_priority":1.0,"input_pickable":false,"motion_mode":0,"up_direction":Vector2(0, -1),"velocity":Vector2(0, 0),"slide_on_ceiling":true,"max_slides":4,"wall_min_slide_angle":0.261799,"floor_stop_on_slope":true,"floor_constant_speed":false,"floor_block_on_wall":true,"floor_max_angle":0.785398,"floor_snap_length":1.0,"platform_on_leave":0,"platform_floor_layers":4294967295,"platform_wall_layers":0,"safe_margin":0.08,"script":ExtResource("1_x86le"),"move_speed":250.0,"settings":SubResource("LabelSettings_qcebg"),"move":false,"fall_move":false,"face_left":false,"weak_point":Object(Area2D,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(1, 1, 1, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"position":Vector2(0, 0),"rotation":0.0,"scale":Vector2(1, 1),"skew":0.0,"disable_mode":0,"collision_layer":0,"collision_mask":2,"collision_priority":1.0,"input_pickable":true,"monitoring":true,"monitorable":true,"priority":0,"gravity_space_override":0,"gravity_point":false,"gravity_point_unit_distance":0.0,"gravity_point_center":Vector2(0, 1),"gravity_direction":Vector2(0, 1),"gravity":980.0,"linear_damp_space_override":0,"linear_damp":0.1,"angular_damp_space_override":0,"angular_damp":1.0,"audio_bus_override":false,"audio_bus_name":&"Master","script":null)
,"body":Object(Sprite2D,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(1, 1, 1, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"clip_children":0,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"position":Vector2(0, 0.100125),"rotation":0.0,"scale":Vector2(-1, 0.997146),"skew":0.0,"texture":ExtResource("2_d3kg8"),"centered":true,"offset":Vector2(0, 0),"flip_h":false,"flip_v":false,"hframes":4,"vframes":3,"frame":6,"region_enabled":false,"region_rect":Rect2(0, 0, 0, 0),"region_filter_clip_enabled":false,"script":null)
,"fall_detect":Object(RayCast2D,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(0, 1, 0, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"position":Vector2(-25, 29.9855),"rotation":0.0,"scale":Vector2(1, 1.00286),"skew":0.0,"enabled":true,"exclude_parent":false,"target_position":Vector2(0, 1.25),"collision_mask":17,"hit_from_inside":false,"collide_with_areas":false,"collide_with_bodies":true,"script":null)
,"forward_detect":Object(RayCast2D,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(0, 1, 0, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"position":Vector2(-26.25, 27.4783),"rotation":0.0,"scale":Vector2(1, 1.00286),"skew":0.0,"enabled":true,"exclude_parent":false,"target_position":Vector2(-1.25, 3.8147e-06),"collision_mask":5,"hit_from_inside":false,"collide_with_areas":false,"collide_with_bodies":true,"script":null)
,"crushed_quotes":null,"shot_quotes":null)

_animationPlayer = Object(AnimationPlayer,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","active":true,"deterministic":false,"reset_on_save":true,"root_node":NodePath(".."),"root_motion_track":NodePath(""),"audio_max_polyphony":32,"callback_mode_process":1,"callback_mode_method":0,"libraries":{
"": SubResource("AnimationLibrary_juugu")
},"autoplay":"idle","playback_default_blend_time":0.0,"speed_scale":1.0,"movie_quit_on_finish":false,"blend_times":[],"script":null)


[node name="main" type="Node" parent="StateOverhead" node_paths=PackedStringArray("starting_state")]
script = ExtResource("4_x64ip")
_name_id = "main"
starting_state = NodePath("idle")

[node name="move" type="Node" parent="StateOverhead/main" node_paths=PackedStringArray("fall", "idle")]
script = ExtResource("7_8qpba")
fall = NodePath("../fall")
idle = NodePath("../idle")

[node name="fall" type="Node" parent="StateOverhead/main" node_paths=PackedStringArray("_idle")]
script = ExtResource("5_13mwt")
_idle = NodePath("../idle")

[node name="idle" type="Node" parent="StateOverhead/main" node_paths=PackedStringArray("move", "fall")]
script = ExtResource("6_cwrv1")
move = NodePath("../move")
fall = NodePath("../fall")

[node name="ded" type="Node" parent="StateOverhead/main"]
script = ExtResource("8_43vlt")

[connection signal="body_entered" from="weak_point" to="." method="_jumped_on"]
[connection signal="body_entered" from="kill_area" to="." method="_kill_player"]
